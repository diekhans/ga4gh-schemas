@namespace("org.ga4gh.models")
/**
This protocol defines annotations on GA4GH reference genomes. 
*/
protocol Annotation {

import idl "common.avdl";

/**
Categorical annotation of a single region
*/
record AnnotatedRegion {
  /** 
  The region being described
  */
  Region region;
 
  /**
  External descriptions (Sequence Ontology...)
  */
  array<OntologyTerm> description = [];

  /**
  Other annotations (denormalised)
  */
  map<string> annotations;
}

/**
Numerical annotation along a region
*/
record Wiggle {
  /** 
  The region being described
  Note that we are fusing parts of BedGraph and Wig syntax.
  The region is being fully annotated, but can be divided into bins.
  If you have gaps, you need to define a sequence of such Wiggles. 
  */
  Region region;
 
  /**
  The values associated to this region.
  If this list contains _count_ elements, then the region is divided
  as cleanly as possible into _count_ bins of equal width. 
  We thus define a numerical function:

  value(position):
    if position < start or position >= start + length:
      return None
    else:
      return array[floor((position - start)*count/length)]
  */ 
  array<float> values = [];
}

/**
Primary Transcript
For trans-spliced genes only!
!!! This is purely for GFF3 consistency, does not apply to human biology
*/
record PrimaryTranscript {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent transcript
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;
 
  /**
  Gene: Remember trans-spliced transcript derives from 2 genes.
  */
  ExternalIdentifier gene;

}

/**
Splice leader RNA
For trans-spliced genes only!
!!! This is purely for GFF3 consistency, does not apply to human biology
*/
record SplicedLeaderRNA {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent transcript
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;
 
  /**
  Gene: Remember trans-spliced transcript derives from 2 genes.
  */
  ExternalIdentifier gene;

}

/**
Intein
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record Intein {
  /**
  ID 
  */
  ExternalIdentifier ID; 

  /**
  Parent Polypeptide
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;

  /**
  Gene: some people like to assign a different gene identifier to the intein and 
  the residual gene.
  */
  ExternalIdentifier gene;

}

/**
Mature Polypeptide
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record MaturePolypeptide {
  /**
  ID 
  */
  ExternalIdentifier ID; 

  /**
  Parent Polypeptide
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;

  /**
  Gene: some people like to assign a different gene identifier to the intein and 
  the residual gene.
  */
  ExternalIdentifier gene;

}

/**
Polypeptide
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record Polypeptide {
  /**
  ID 
  */
  ExternalIdentifier ID; 

  /**
  Parent CDS
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;

  /**
  Mature polypeptides
  List of exteins conserved in amino acid chain
  */
  array<MaturePolypeptide> mature_polypeptides = [];

  /**
  Inteins 
  List of inteins removed from amino acid chain
  */
  array<Intein> inteins = [];

}

/**
Coding sequence (CDS)
*/
record CDS {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent exon
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;
 
  /**
  Phase of the first base of the CDS: 
  0: first base of codon
  1: second base of codon
  2: third base of codon
  -1: not in CDS
  */
  int phase;
  
  /**
  Gene: this is useless in 99% of cases, but as highlighted by the GFF3 commitee
  (http://www.sequenceontology.org/gff3.shtml) if a transcript is polycistronic
  each CDS derives from one of multiple genes.
  */
  ExternalIdentifier gene;

  /**
  Polypeptide:
  Only relevant to describe inteins, purely for GFF3 conformity
  */
  array<Polypeptide> polypeptides = [];
}

/**
Exonic region
*/
record Exon {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent transcript
  */
  ExternalIdentifier parent;

  /** 
  The region being described
  */
  AnnotatedRegion region;

  /**
  The coding sequence(s) of the exon.
  In 99% of cases there is exactly one CDS per exon, but in the case of frameshifts
  you have multiple CDSs per exon (http://www.sequenceontology.org/gff3.shtml).
  */
  array<CDS> CDSs = [];
}

/** 
Transcript
*/
record Transcript {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent gene(s)
  In 99% of cases, 1 transcript => 1 gene, but not in the case of
  trans-spliced genes, poly-cistronic transcripts or fusion transcripts
  */
  array<ExternalIdentifier> parents = [];

  /**
  Exons 
  */
  array<Exon> exons = [];

  /**
  Annotations (Any SO object that is not explicitly represented by a record)
  - Alignment exceptions
  - Intron types
  - Start and end codon
  - etc.
  */
  array<AnnotatedRegion> annotation = [];

  /**
  External descriptions (Sequence Ontology...)
  */
  array<OntologyTerm> description = [];

  /**
  Other annotations (denormalised)
  */
  map<string> annotations;
}

/**
Gene
*/
record Gene {
  /**
  ID 
  */
  ExternalIdentifier ID;

  /**
  Parent dataset
  */
  ExternalIdentifier source;

  /**
  Transcripts
  */
  array<Transcript> transcripts = [];

  /**
  External descriptions (Gene Ontology...)
  */
  array<OntologyTerm> description = [];

  /**
  Other annotations (denormalised)
  */
  map<string> annotations;
}

}
