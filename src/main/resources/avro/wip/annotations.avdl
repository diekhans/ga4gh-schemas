@namespace("org.ga4gh")
/**
This protocol defines annotations on GA4GH reference genomes. 
*/
protocol GAAnnotation {

import idl "../common.avdl";

/**
Categorical annotation of a single region
*/
record GAAnnotatedRegion {
  /** 
  The region being annotated
  */
  GARegion region;
 
  /**
  External descriptions (Sequence Ontology...)
  */
  array<OntologyTerm> description = [];
}

/**
Numerical annotation along a region
*/
record GAWiggle {
  /** 
  The region being annotated
  Note that we are fusing parts of BedGraph and Wig syntax.
  The region is being fully annotated, but can be divided into bins.
  If you have gaps, you need to define a sequence of such GAWiggles. 
  */
  GARegion region;
 
  /**
  The values associated to this region.
  If this list contains _count_ elements, then the region is divided
  as cleanly as possible into _count_ bins of equal width. 
  We thus define a numerical function:

  value(position):
    if position < start or position >= start + length:
      return None
    else:
      return array[floor((position - start)*count/length)]
  */ 
  array<float> values = [];
}

/**
Primary Transcript
For trans-spliced genes only!
!!! This is purely for GFF3 consistency, does not apply to human biology
*/
record GAPrimaryTranscript {
  /**
  ID 
  */
  GAExternalIndentifier ID;

  /**
  Parent transcript
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;
 
  /**
  Gene: Remember trans-spliced transcript derives from 2 genes.
  */
  GAExternalIdentifier gene;

}

/**
Splice leader RNA
For trans-spliced genes only!
!!! This is purely for GFF3 consistency, does not apply to human biology
*/
record GASplicedLeaderRNA {
  /**
  ID 
  */
  GAExternalIdentifier ID;

  /**
  Parent transcript
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;
 
  /**
  Gene: Remember trans-spliced transcript derives from 2 genes.
  */
  GAExternalIdentifier gene;

}

/**
Intein
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record GAIntein{
  /**
  ID 
  */
  GAExternalIdentifier ID; 

  /**
  Parent Polypeptide
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;

  /**
  Gene: some people like to assign a different gene identifier to the intein and 
  the residual gene.
  */
  GAExternalIdentifier gene;

}

/**
Mature Polypeptide
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record GAMaturePolypeptide {
  /**
  ID 
  */
  GAExternalIdentifier ID; 

  /**
  Parent Polypeptide
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;

  /**
  Gene: some people like to assign a different gene identifier to the intein and 
  the residual gene.
  */
  GAExternalIdentifier gene;

}

/**
Polypeptide
!!! Only relevant to describe inteins. (http://en.wikipedia.org/wiki/Intein)
*/
record GAPolypeptide {
  /**
  ID 
  */
  GAExternalIdentifier ID; 

  /**
  Parent CDS
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;

  /**
  Mature polypeptides
  List of exteins conserved in amino acid chain
  */
  array<GAMaturePolypeptide> = [];

  /**
  Inteins 
  List of inteins removed from amino acid chain
  */
  array<GAIntein> = [];

}

/**
Coding sequence (CDS)
*/
record GACDS {
  /**
  ID 
  */
  GAExternalIdentifier ID;

  /**
  Parent exon
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;
 
  /**
  Phase of the first base of the CDS: 
  0: first base of codon
  1: second base of codon
  2: third base of codon
  -1: not in CDS
  */
  int phase;
  
  /**
  Gene: this is useless in 99% of cases, but as highlighted by the GFF3 commitee
  (http://www.sequenceontology.org/gff3.shtml) if a transcript is polycistronic
  each CDS derives from one of multiple genes.
  */
  GAExternalIdentifier gene;

  /**
  Polypeptide:
  Only relevant to describe inteins, purely for GFF3 conformity
  */
  array<GAPolypeptide> = [];
}

/**
Exonic region
*/
record GAExon {
  /**
  ID 
  */
  GAExternalIdentifier ID;

  /**
  Parent transcript
  */
  GAExternalIdentifier parent;

  /** 
  The region being annotated
  */
  GARegion region;

  /**
  The coding sequence(s) of the exon.
  In 99% of cases there is exactly one CDS per exon, but in the case of frameshifts
  you have multiple CDSs per exon (http://www.sequenceontology.org/gff3.shtml).
  */
  array<GACDS> CDSs = []
}

/** 
Transcript
*/
record GATranscript {
  /**
  ID 
  */
  GAExternalIdentifier ID;

  /**
  Parent gene(s)
  In 99% of cases, 1 transcript => 1 gene, but not in the case of
  trans-spliced genes, poly-cistronic transcripts or fusion transcripts
  */
  array<GAExternalIdentifier> parents = [];

  /**
  Exons 
  */
  array<GAExon> exons = [];

  /**
  External descriptions (Ensembl, RefSeq...)
  */
  GAExternalIdentifier references;

}

/**
Gene
*/
record GAGene {
  /**
  ID 
  */
  GAExternalIdentifier ID;

  /**
  Name 
  */
  string name;

  /**
  Parent dataset
  */
  GAExternalIdentifier source;

  /**
  Transcripts
  */
  array<GATranscript> transcripts = [];

  /**
  External reference (Ensembl, RefSeq)
  */
  GAExternalIdentifier references;

  /**
  Description/categorization
  (e.g. GO)
  */
  array<OntologyTerm> description = [];
}

}
